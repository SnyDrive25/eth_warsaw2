import { ContractTransaction, Signer, providers, BigNumberish, BigNumber } from 'ethers';
import { ClientTypes } from '@requestnetwork/types';
import { IPreparedTransaction } from './prepared-transaction';
import { ERC20Token } from '@superfluid-finance/sdk-core';
/**
 * Gets the underlying token address of an ERC777 currency based request
 * @param request the request that contains currency information
 * @param provider the web3 provider. Defaults to Etherscan
 */
export declare function getRequestUnderlyingToken(request: ClientTypes.IRequestData, provider?: providers.Provider): Promise<ERC20Token>;
/**
 * Gets the underlying token address of an ERC777 currency based request
 * @param request the request that contains currency information
 * @param provider the web3 provider. Defaults to Etherscan
 */
export declare function getUnderlyingTokenBalanceOf(request: ClientTypes.IRequestData, address: string, provider?: providers.Provider): Promise<BigNumberish>;
/**
 * Check if the user has the specified amount of underlying token
 * @param request the request that contains currency information
 * @param address token owner
 * @param provider the web3 provider. Defaults to Etherscan
 * @param amount the required amount
 */
export declare function hasEnoughUnderlyingToken(request: ClientTypes.IRequestData, address: string, provider: providers.Provider | undefined, amount: BigNumber): Promise<boolean>;
/**
 * Determine whether or not the supertoken has enough allowance
 * @param request the request that contains currency information
 * @param address token owner
 * @param provider the web3 provider. Defaults to Etherscan
 * @param amount of token required
 */
export declare function checkSuperTokenUnderlyingAllowance(request: ClientTypes.IRequestData, address: string, provider?: providers.Provider, amount?: BigNumber): Promise<boolean>;
/**
 * Get the SF operation to approve the supertoken to spend underlying tokens
 * @param request the request that contains currency information
 * @param provider the web3 provider. Defaults to Etherscan
 * @param amount to allow, defalts to max allowance
 */
export declare function prepareApproveUnderlyingToken(request: ClientTypes.IRequestData, provider?: providers.Provider, amount?: BigNumber): Promise<IPreparedTransaction>;
/**
 * Approve the supertoken to spend the speicified amount of underlying token
 * @param request the request that contains currency information
 * @param signer the web3 signer
 * @param amount to allow, defaults to max allowance
 * @returns
 */
export declare function approveUnderlyingToken(request: ClientTypes.IRequestData, signer: Signer, amount?: BigNumber): Promise<ContractTransaction>;
/**
 * Prepare the wrap transaction of the specified amount of underlying token into supertoken
 * @param request the request that contains currency information
 * @param provider the web3 provider
 * @param amount to allow, defaults to max allowance
 * @returns
 */
export declare function prepareWrapUnderlyingToken(request: ClientTypes.IRequestData, provider?: providers.Provider, amount?: BigNumber): Promise<IPreparedTransaction>;
/**
 * Wrap the speicified amount of underlying token into supertokens
 * @param request the request that contains currency information
 * @param signer the web3 signer
 * @param amount to allow, defaults to max allowance
 * @returns
 */
export declare function wrapUnderlyingToken(request: ClientTypes.IRequestData, signer: Signer, amount?: BigNumber): Promise<ContractTransaction>;
/**
 * Prepare the unwrapping transaction of the supertoken (ERC777) into underlying asset (ERC20)
 * @param request the request that contains currency information
 * @param provider the web3 provider
 * @param amount to unwrap
 */
export declare function prepareUnwrapSuperToken(request: ClientTypes.IRequestData, provider: providers.Provider | undefined, amount: BigNumber): Promise<IPreparedTransaction>;
/**
 * Unwrap the supertoken (ERC777) into underlying asset (ERC20)
 * @param request the request that contains currency information
 * @param signer the web3 signer
 * @param amount to unwrap
 */
export declare function unwrapSuperToken(request: ClientTypes.IRequestData, signer: Signer, amount: BigNumber): Promise<ContractTransaction>;
/**
 * Check if there's an existing stream for the trio (Sender, Receiver, Currency)
 * @param sender address
 * @param receiver address
 * @param currency to stream
 * @param provider web3 provider.
 * @returns
 */
export declare function checkExistingStream(request: ClientTypes.IRequestData, sender: string, provider?: providers.Provider): Promise<boolean>;
//# sourceMappingURL=erc777-utils.d.ts.map