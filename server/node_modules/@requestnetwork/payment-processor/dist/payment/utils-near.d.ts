import { BigNumberish } from 'ethers';
import { Near, WalletConnection } from 'near-api-js';
import { CurrencyTypes, RequestLogicTypes } from '@requestnetwork/types';
/**
 * Callback arguments for the Near web wallet.
 * @member callbackUrl called upon transaction approval
 * @member meta (according to Near docs: `meta` will be attached to the `callbackUrl` as a url search param)
 */
export interface INearTransactionCallback {
    callbackUrl?: string;
    meta?: string;
}
export declare const isValidNearAddress: (nearNetwork: Near, address: string) => Promise<boolean>;
export declare const isNearAccountSolvent: (amount: BigNumberish, nearWalletConnection: WalletConnection, token?: RequestLogicTypes.ICurrency) => Promise<boolean>;
export declare const processNearPayment: (walletConnection: WalletConnection, network: CurrencyTypes.NearChainName, amount: BigNumberish, to: string, paymentReference: string, version?: string, callback?: INearTransactionCallback | undefined) => Promise<void>;
/**
 * Processes a payment in Near native token, with conversion.
 *
 * @param amount is defined with 2 decimals, denominated in `currency`
 * @param currency is a currency ticker (e.g. "ETH" or "USD")
 * @param maxRateTimespan accepts any kind rate's age if '0'
 */
export declare const processNearPaymentWithConversion: (walletConnection: WalletConnection, network: CurrencyTypes.NearChainName, amount: BigNumberish, to: string, paymentReference: string, currency: string, feeAddress: string, feeAmount: BigNumberish, maxToSpend: BigNumberish, maxRateTimespan?: string, version?: string, callback?: INearTransactionCallback | undefined) => Promise<void>;
export declare const processNearFungiblePayment: (walletConnection: WalletConnection, network: CurrencyTypes.NearChainName, amount: BigNumberish, to: string, paymentReference: string, currencyAddress: string, feeAddress: string, feeAmount: BigNumberish, callback?: INearTransactionCallback | undefined) => Promise<void>;
/**
 * Stores the minimum deposit amount on the `paymentAddress` account for `tokenAddress`.
 * This does not check the existing deposit, if any, and should be called if `isReceiverReady` is false.
 * @param walletConnection
 * @param tokenAddress
 * @param paymentAddress
 */
export declare const storageDeposit: (walletConnection: WalletConnection, tokenAddress: string, paymentAddress: string) => Promise<void>;
/**
 * This checks that the `paymentAddress` has enough storage on the `tokenAddress` to receive tokens.
 *
 * It returns false if trying to send tokens to the `paymentAddress` would result in:
 *
 * - 'Smart contract panicked: The account account.identifier.near is not registered'
 *
 */
export declare const isReceiverReady: (walletConnection: WalletConnection, tokenAddress: string, paymentAddress: string) => Promise<boolean>;
//# sourceMappingURL=utils-near.d.ts.map