import { ContractTransaction, Signer, BigNumberish, providers, BigNumber } from 'ethers';
import { ClientTypes } from '@requestnetwork/types';
import { ITransactionOverrides } from './transaction-overrides';
import { IPreparedTransaction } from './prepared-transaction';
/**
 * Gets the receivableTokenId from a ERC20TransferableReceivable contract given
 * a paymentReference and paymentAddress of the request
 * @param request
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 */
export declare function getReceivableTokenIdForRequest(request: ClientTypes.IRequestData, signerOrProvider: providers.Provider | Signer): Promise<BigNumber>;
/**
 * Helper method to determine whether a request has a receivable minted yet
 *
 * @param request
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 */
export declare function hasReceivableForRequest(request: ClientTypes.IRequestData, signerOrProvider: providers.Provider | Signer): Promise<boolean>;
/**
 * Processes a transaction to mint an ERC20TransferableReceivable.
 * @param request
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param overrides optionally, override default transaction values, like gas.
 */
export declare function mintErc20TransferableReceivable(request: ClientTypes.IRequestData, signerOrProvider?: providers.Provider | Signer, overrides?: ITransactionOverrides): Promise<ContractTransaction>;
/**
 * Encodes the call to mint a request through an ERC20TransferableReceivable contract, can be used with a Multisig contract.
 * @param request request to pay
 */
export declare function prepareMintErc20TransferableReceivableTransaction(request: ClientTypes.IRequestData): IPreparedTransaction;
/**
 * Encodes call to mint a request through an ERC20TransferableReceivable contract, can be used with a Multisig contract.
 * @param request request to pay
 */
export declare function encodeMintErc20TransferableReceivableRequest(request: ClientTypes.IRequestData): string;
/**
 * Processes a transaction to pay an ERC20 receivable Request.
 * @param request
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param amount optionally, the amount to pay. Defaults to remaining amount of the request.
 * @param feeAmount optionally, the fee amount to pay. Defaults to the fee amount of the request.
 * @param overrides optionally, override default transaction values, like gas.
 */
export declare function payErc20TransferableReceivableRequest(request: ClientTypes.IRequestData, signerOrProvider?: providers.Provider | Signer, amount?: BigNumberish, feeAmount?: BigNumberish, overrides?: ITransactionOverrides): Promise<ContractTransaction>;
/**
 * Encodes the call to pay a request through the ERC20 receivable contract, can be used with a Multisig contract.
 * @param request request to pay
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param amount optionally, the amount to pay. Defaults to remaining amount of the request.
 * @param feeAmountOverride optionally, the fee amount to pay. Defaults to the fee amount of the request.
 */
export declare function prepareErc20TransferableReceivablePaymentTransaction(request: ClientTypes.IRequestData, signerOrProvider: providers.Provider | Signer, amount?: BigNumberish, feeAmountOverride?: BigNumberish): Promise<IPreparedTransaction>;
/**
 * Encodes the call to pay a request through the ERC20 receivable contract, can be used with a Multisig contract.
 * @param request request to pay
 * @param signerOrProvider the Web3 provider, or signer. Defaults to window.ethereum.
 * @param amount optionally, the amount to pay. Defaults to remaining amount of the request.
 * @param feeAmountOverride optionally, the fee amount to pay. Defaults to the fee amount of the request.
 */
export declare function encodePayErc20TransferableReceivableRequest(request: ClientTypes.IRequestData, signerOrProvider: providers.Provider | Signer, amount?: BigNumberish, feeAmountOverride?: BigNumberish): Promise<string>;
//# sourceMappingURL=erc20-transferable-receivable.d.ts.map