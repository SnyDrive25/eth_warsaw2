"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.payNearFungibleRequest = void 0;
const tslib_1 = require("tslib");
const smart_contracts_1 = require("@requestnetwork/smart-contracts");
const types_1 = require("@requestnetwork/types");
const utils_1 = require("./utils");
const utils_near_1 = require("./utils-near");
const currency_1 = require("@requestnetwork/currency");
/**
 * Processes the transaction to pay a request in fungible token on NEAR with fee (Erc20FeeProxy).
 * @param request the request to pay
 */
function payNearFungibleRequest(request, walletConnection, amount, callback) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        (0, utils_1.validateRequest)(request, types_1.ExtensionTypes.PAYMENT_NETWORK_ID.ERC20_FEE_PROXY_CONTRACT);
        const { paymentReference, paymentAddress, feeAddress, feeAmount, network } = (0, utils_1.getRequestPaymentValues)(request);
        if (!paymentReference) {
            throw new Error('Cannot pay without a paymentReference');
        }
        if (!network || !currency_1.NearChains.isChainSupported(network)) {
            throw new Error('Should be a Near network');
        }
        currency_1.NearChains.assertChainSupported(network);
        const amountToPay = (0, utils_1.getAmountToPay)(request, amount).toString();
        if (!(yield (0, utils_near_1.isReceiverReady)(walletConnection, request.currencyInfo.value, paymentAddress))) {
            throw new Error(`The paymentAddress is not registered for the token ${request.currencyInfo.value}`);
        }
        const proxyAddress = smart_contracts_1.erc20FeeProxyArtifact.getAddress(network, 'near');
        if (!(yield (0, utils_near_1.isReceiverReady)(walletConnection, request.currencyInfo.value, proxyAddress))) {
            throw new Error(`The proxy is not registered for the token ${request.currencyInfo.value}`);
        }
        return (0, utils_near_1.processNearFungiblePayment)(walletConnection, network, amountToPay, paymentAddress, paymentReference, request.currencyInfo.value, feeAddress || '0x', feeAmount || 0, callback);
    });
}
exports.payNearFungibleRequest = payNearFungibleRequest;
//# sourceMappingURL=near-fungible.js.map