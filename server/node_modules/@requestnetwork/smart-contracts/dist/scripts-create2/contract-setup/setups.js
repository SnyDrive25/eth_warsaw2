"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupContract = void 0;
const tslib_1 = require("tslib");
const setupETHConversionProxy_1 = require("./setupETHConversionProxy");
const setupBatchConversionPayments_1 = require("./setupBatchConversionPayments");
const setupERC20SwapToConversion_1 = require("./setupERC20SwapToConversion");
const setupERC20SwapToPay_1 = require("./setupERC20SwapToPay");
const setupChainlinkConversionPath_1 = require("./setupChainlinkConversionPath");
const setupErc20ConversionProxy_1 = require("./setupErc20ConversionProxy");
/**
 * Administrate the specified contract at the specified address
 * If the address is not provided fallback to the contract latest deployment address
 * @param contractAddress address of the proxy
 * @param hre Hardhat runtime environment
 * @param contractName name of the contract
 */
const setupContract = ({ contractAddress, contractName, hre, }) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    switch (contractName) {
        case 'ChainlinkConversionPath': {
            yield (0, setupChainlinkConversionPath_1.setupChainlinkConversionPath)({ contractAddress, hre });
            break;
        }
        case 'EthConversionProxy': {
            yield (0, setupETHConversionProxy_1.setupETHConversionProxy)({ contractAddress, hre });
            break;
        }
        case 'Erc20ConversionProxy': {
            yield (0, setupErc20ConversionProxy_1.setupErc20ConversionProxy)({ contractAddress, hre });
            break;
        }
        case 'ERC20SwapToPay': {
            yield (0, setupERC20SwapToPay_1.setupERC20SwapToPay)({ contractAddress, hre });
            break;
        }
        case 'ERC20SwapToConversion': {
            yield (0, setupERC20SwapToConversion_1.setupERC20SwapToConversion)({ contractAddress, hre });
            break;
        }
        case 'BatchConversionPayments': {
            yield (0, setupBatchConversionPayments_1.setupBatchConversionPayments)({ contractAddress, hre });
            break;
        }
        default: {
            console.log(`No setup to perform for contract ${contractName}`);
            break;
        }
    }
});
exports.setupContract = setupContract;
//# sourceMappingURL=setups.js.map