import { IdentityTypes, SignatureProviderTypes, SignatureTypes } from '@requestnetwork/types';
import { providers } from 'ethers';
/**
 * Implementation of the web3 signature provider
 * Allows to sign() with "Ethereum_address" identities
 */
export default class Web3SignatureProvider implements SignatureProviderTypes.ISignatureProvider {
    /** list of supported signing method */
    supportedMethods: SignatureTypes.METHOD[];
    /** list of supported identity types */
    supportedIdentityTypes: IdentityTypes.TYPE[];
    /** public for test purpose */
    web3Provider: providers.Web3Provider;
    constructor(web3Provider: any);
    /**
     * Signs data
     *
     * @param data The data to sign
     * @param signer The identity to sign with
     *
     * @returns The signed data
     */
    sign(data: any, signer: IdentityTypes.IIdentity): Promise<SignatureTypes.ISignedData>;
    /** Get the signed data, if valid, null if not */
    private getSignedData;
}
//# sourceMappingURL=web3-signature-provider.d.ts.map