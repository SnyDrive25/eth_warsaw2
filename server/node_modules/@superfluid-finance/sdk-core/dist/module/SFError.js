import { serializeError } from "serialize-error";
const errorTypeToTitleMap = new Map([
    ["FRAMEWORK_INITIALIZATION", "Framework Initialization"],
    ["SUPERTOKEN_INITIALIZATION", "SuperToken Initialization"],
    ["CREATE_SIGNER", "Create Signer"],
    ["SUPERTOKEN_READ", "SuperToken Read"],
    ["SUBGRAPH_ERROR", "Subgraph"],
    ["CFAV1_READ", "ConstantFlowAgreementV1 Read"],
    ["IDAV1_READ", "InstantDistributionAgreementV1 Read"],
    ["INVALID_ADDRESS", "Invalid Address"],
    ["INVALID_OBJECT", "Invalid Object"],
    ["POPULATE_TRANSACTION", "Populate Transaction"],
    ["EXECUTE_TRANSACTION", "Execute Transaction"],
    ["SIGN_TRANSACTION", "Sign Transaction"],
    ["UNSUPPORTED_OPERATION", "Unsupported Batch Call Operation"],
    ["MISSING_TRANSACTION_PROPERTIES", "Missing Transaction Properties"],
    ["BATCH_CALL_ERROR", "Batch Call"],
    ["NETWORK_MISMATCH", "Network Mismatch"],
    ["UNCLEAN_PERMISSIONS", "Unclean Permissions"],
    ["NEGATIVE_FLOW_ALLOWANCE", "Negative Flow Rate Allowance"],
]);
export class SFError extends Error {
    constructor({ type, message, cause }) {
        const fullMessage = `${errorTypeToTitleMap.get(type)} Error: ${message}${cause
            ? `
Caused by: ${JSON.stringify(serializeError(cause), null, 2)}`
            : ""}`;
        super(fullMessage, cause
            ? {
                cause: cause, // Currently "unknown" is not compatible with "cause" (because it expectes "Error" and that's why we cast) but this was recently changed and merged to also allow "unknown": https://github.com/microsoft/TypeScript/pull/49639
            }
            : {});
        // Fallback back environments where `Error.cause` is now yet natively supported
        if (cause && !this.cause) {
            this.cause = cause;
        }
        this.type = type;
        Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#support-for-newtarget
    }
}
//# sourceMappingURL=SFError.js.map